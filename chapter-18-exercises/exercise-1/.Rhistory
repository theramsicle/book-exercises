july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
print(july_fourth) # Time difference of
# Call intro() function
intro("third", "Meteorology")
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year, and my major is", major)
return(greet)
}
# Call intro() function
intro("third", "Meteorology.")
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year, and my major is", major, ".")
return(greet)
}
# Call intro() function
intro("third", "Meteorology")
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
length <- nchar(lyric)
fruits <- substr(lyric, 15, 32)
?gsub
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub()
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro, fruits_e
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro + fruits_e
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- c(intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- (intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- (intro fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro fruits_e
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, lyric_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, lyric_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num)
result <- num + 3
return(result)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
result <- num + 3
return(result)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
View(ten)
print(ten)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
result <- num + 3
return(result)
}
result <- num + 3
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
result <- num + 3
return(result)
}
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
return(num + 3)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
feet_to_inches <- feet / 12
total_inches <- feet_to_inches + inches
inches_to_meters <- total_inches * 0.0254
return(inches_to_meters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6, 4)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
feet_to_inches <- feet * 12
total_inches <- feet_to_inches + inches
inches_to_meters <- total_inches * 0.0254
return(inches_to_meters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6, 4)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Ben", "Thomas", "Connor")
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Ben", "Thomas", "Connor")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n + 1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- 10:1
# Subtract `m` FROM `n`. Note the recycling!
m - n
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
plot(sin_wave)
plot(cos_wave)
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- 21:30
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
print(eleventh)
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[c(2:5)]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2,100,2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even) %% 0
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
even %% 0
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
even % 0
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
?all
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
even %% 0
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 0)
source('C:/Users/benra/Downloads/COLLEGE QUARTERS/Winter2020/INFO 201/a2-core-skills-theramsicle/assignment.R')
source('C:/Users/benra/Downloads/COLLEGE QUARTERS/Winter2020/INFO 201/a2-core-skills-theramsicle/assignment.R')
date_has_passed <- function(date, ignore_year = FALSE) {
if (ignore_year == FALSE) {
passed <- date - Sys.Date()
days <- as.numeric(passed)
if (days > 0) {
return(FALSE)
} else {
return(TRUE)
}
} else {
new_date <- change_year(date, 0000) # converted the year to 0000
today_no_year <- change_year(Sys.Date(), 0000) # also to 0000, doesn't matter as long as they are the same
passed <- new_date - today_no_year
days <- as.numeric(passed)
if (days > 0) {
return(FALSE)
} else {
return(TRUE)
}
}
}
has_it_passed <- date_has_passed(deadline)
print(has_it_passed)
has_it_passed <- date_has_passed(deadline, TRUE)
print(has_it_passed)
deadline <- as.Date('2020-01-17')
has_it_passed <- date_has_passed(deadline, TRUE)
print(has_it_passed)
birthdays <- list(
Me = as.Date('1999-07-10'),
Mom = as.Date('1966-11-21'),
Dad = as.Date('1959-02-26'),
Molly = as.Date('2002-09-24')
)
source('C:/Users/benra/Downloads/COLLEGE QUARTERS/Winter2020/INFO 201/a2-core-skills-theramsicle/assignment.R')
install.packages("stringr")
source('C:/Users/benra/Downloads/COLLEGE QUARTERS/Winter2020/INFO 201/a2-core-skills-theramsicle/assignment.R')
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("eggs", "toast", "waffles", "bacon")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("sandwich", "pudding", "pretzels", "apple")
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("eggs", "toast", "waffles", "bacon")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("sandwich", "pudding", "pretzels", "apple")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(
breakfast = my_breakfast
lunch = my_lunch
)
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(
breakfast = my_breakfast
lunch = my_lunch
)
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(
breakfast = my_breakfast,
lunch = my_lunch
)
print(meals)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("steak", "potatoes")
print(meals)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
meals[["lunch"]]
meals[[5]] <- meals[["lunch"]]
View(meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
meals[c("breakfast", "lunch")]
early_meals <- meals[c("breakfast", "lunch")]
print(early_meals)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
num_of_items <- lapply(meals, length())
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
num_of_items <- lapply(meals, length(meals$breakfast))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
num_of_items <- lapply(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
num_of_items <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal_vector) {
new_vector <- C(meal_vector, "pizza")
return(new_vector)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- c(add_pizza(meals))
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- c(add_pizza(meals))
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal_vector) {
new_vector <- C(meal_vector, "pizza")
return(new_vector)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal_vector) {
new_vector <- c(meal_vector, "pizza")
return(new_vector)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
updated_sharks <- c(Sharks, Goblin)
print(updated_sharks)
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(Sharks, Goblin)
print(updated_sharks)
updated_sharks <- c(sharks, Goblin)
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
earthquakes[ earthquakes > 6.5]
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
earthquakes[ earthquakes > 6.5]
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
print(endangered(filter))
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
print(endangered(filter))
print(endangered[filter])
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[-4]
is.list(shark_length)
shark_length[-4]
shark_length <- c(shark_length[-4])
is.list(shark_length)
shark_length <- c(shark_length[-4])
shark_length[-4]
shark_length[4]
shark_length[[4]]
shark_length[[4]]
shark_length[4]
shark_length[-4]
shark_length[-3]
shark_length[-2]
shark_length[-1]
shark_length[1]
shark_length[2]
shark_length[3]
shark_length[4]
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[4]
is.list(shark_length)
shark_length <- c(shark_length[4])
is.list(shark_length)
shark_length[4]
as.numeric(shark_length[4])
shark_length[4]
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[4]
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[[4]]
is.list(shark_length)
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) - ((tea + 2*scone) * discount)
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + (total_with_discount*sales_tax)
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
lab_grades[[is_participant]] <- "Yes"
lab_grades[[is_participant = "Yes"]]
install.packages('httr')
install.packages('jsonlite')
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library('httr')
library('jsonlite')
library('dplyr')
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# URI variables (if any)
username <- "theramsicle"
# The specific endpoint
resource <- paste0("/users/", username, "/repos")
# The complete URI
uri <- paste0(base_uri, resource)
GET(paste0(base_uri, resource))
# URI variables (if any)
username <- "theramsicle"
# The specific endpoint
org_resource <- paste0("/users/", username, "/repos")
# The complete URI
uri <- paste0(base_uri, org_resource)
GET(paste0(base_uri, resource))
GET(paste0(base_uri, resource))
GET(paste0(base_uri, org_resource))
response<- GET(paste0(base_uri, org_resource))
response <- GET(paste0(base_uri, org_resource))
body <- content(response, "text")
repos <- fromJSON(body)
View(repos)
# URI variables (if any)
username <- "programming-for-data-science"
# The specific endpoint
org_resource <- paste0("/users/", username, "/repos")
# The complete URI
uri <- paste0(base_uri, org_resource)
response <- GET(paste0(base_uri, org_resource))
body <- content(response, "text")
repos <- fromJSON(body)
View(repos)
search_endpoint <- 'search/repositories'
GET(paste0(base_uri, org_resource), query = query_params)
query_params <- list(q = 'dplyr')
GET(paste0(base_uri, org_resource), query = query_params)
body2 <- content(response2, 'text')
response2 <- GET(paste0(base_uri, org_resource), query = query_params)
body2 <- content(response2, 'text')
repos2 <- fromJSON(body2)
repos2 <- fromJSON(body2)
response2 <- GET(paste0(base_uri, search_endpoint), query = query_params)
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com/"
response2 <- GET(paste0(base_uri, search_endpoint), query = query_params)
body2 <- content(response2, 'text')
repos2 <- fromJSON(body2)
repos2 <- fromJSON(body2)
View(repos2)
View(items)
# load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
nyt_key <- 'TieWrcIAGGvYhYaPtXDuBEf5xkppzHTj'
setwd("C:/Users/benra/Downloads/COLLEGE QUARTERS/Winter2020/INFO 201/book-exercises/chapter-18-exercises/exercise-1")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source('apikey.R') # go to that file, select all, and hit ctrl-enter
query_params <- list('api-key' = nyt_key)
setwd("C:/Users/benra/Downloads/COLLEGE QUARTERS/Winter2020/INFO 201/book-exercises/chapter-18-exercises/exercise-1")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- 'Spotlight'
base_uri <- 'https://api.nytimes.com/svc/movies/v2/'
endpoint <- 'reviews/search.json'
uri <- paste0(base_uri, endpoint)
query_params <- list('api-key' = nyt_key, 'movie_name' = movie_name)
query_params_list <- list('api-key' = nyt_key, 'movie_name' = movie_name)
response <- GET(uri, query = query_params_list)
body <- content(response, 'text')
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
data
library(knitr)
